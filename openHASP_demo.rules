var Timer timermoodoff = null

/* CHANNEL TRIGGERED */

rule "openHASP Bad CHANNEL TRIGGERED"
    when
        Channel "mqtt:broker:openHASPBroker:openHASP_Plate_State_Event" triggered
    then
        logInfo("openHASP_channel.rules", " Channel triggered: {} ",  receivedEvent)

        var topic = receivedEvent.toString.split("#").get(0)
        var payload = receivedEvent.substring(topic.length+1,receivedEvent.length)
        var topicvalue = topic.split("/").get(topic.split("/").size -1)
        var jsonkey = transform("JS","json_demo_key.js",payload)
        var jsonvalue = transform("JSONPATH", "$." + jsonkey, payload).toString.toUpperCase

        logInfo("openHASP_channel.rules", " Topic: {} [{}] Payload: {}",  topic, topicvalue , payload)

        switch (topicvalue)
        {
            case 'idle':
            {
                logInfo("openHASP_channel.rules", " Idle event: {}",  payload)
            }
            case 'statusupdate':
            {
                logInfo("openHASP_channel.rules", " Statusupdate: {}",  payload)
            }
            case 'dim':
            {
                logInfo("openHASP_channel.rules", " Dim: {}",  payload)
            }
            case 'page':
            {
                logInfo("openHASP_channel.rules", " Page: {}",  payload)
                postUpdate(openHASP_Plate_Page_Current, payload)
            }
            case 'input':
            {
                logInfo("openHASP_channel.rules", " Input: {}",  payload)
            }
            case 'sensors':
            {
                logInfo("openHASP_channel.rules", " Sensors: {}",  payload)
            }
            case 'backlight':
            {
                logInfo("openHASP_channel.rules", " Backlight: {}",  payload)
            }
            case 'moodlight':
            {
                logInfo("openHASP_channel.rules", " Moodlight: {}",  payload)
            }
            default:
            {
                var eventpage = topicvalue.split("b").get(0).split("p").get(1)
                var eventbutton = topicvalue.split("b").get(1)

                logInfo("openHASP_channel.rules", " Page: {} Button: {} Key: {} Value: {}",  eventpage, eventbutton, jsonkey, jsonvalue)

                switch(eventpage)
                {
                    case '1':
                    {
                        switch(eventbutton)
                        {
                            case '13':
                            {
                                if(jsonkey == "event" && jsonvalue == "UP")
                                {
                                    var String stat
                                    if (onkyo_zone2_Power.state == null || onkyo_zone2_Power.state == OFF){
                                        onkyo_zone2_Power.sendCommand(ON)
                                        stat = "ON"
                                    } else {
                                        onkyo_zone2_Power.sendCommand(OFF)
                                        stat = "OFF"
                                    }
                                    openHASP_Plate_Command_JSON.sendCommand("[''p1b12.value_str=" + stat + "']")
                                }
                            }
                            case '15':
                            {
                                if(jsonkey == "event" && jsonvalue == "UP")
                                {
                                    // var String stat
                                    if (Virtual_Input.state == null || Virtual_Input.state == 1){
                                        Virtual_Input.sendCommand(36)
                                        // VirtualSource_Zone2.sendCommand(ON)
                                        // stat = "Tuner"
                                    } else {
                                        Virtual_Input.sendCommand(1)
                                        // stat = "PC"
                                    }
                                    // openHASP_Plate_Command_JSON.sendCommand("['p1b10.text=Source " + stat + "']")
                                }
                            }
                            case '17':
                            {
                                if(jsonkey == "event" && jsonvalue == "UP")
                                {
                                    VirtualleiserOG_Zone2.sendCommand(ON)
                                    openHASP_Plate_Command_JSON.sendCommand("['p1b16.value_str=" + onkyo_zone2_Volume.state + "']")
                                }
                            }
                            case '18':
                            {
                                if(jsonkey == "event" && jsonvalue == "UP")
                                {
                                    VirtuallauterOG_Zone2.sendCommand(ON)
                                    openHASP_Plate_Command_JSON.sendCommand("['p1b16.value_str=" + onkyo_zone2_Volume.state + "']")
                                }
                            }
                        }
                    }
                    case '3':   // Colorpicker Button ID
                        switch(eventbutton)
                        {
                            case '4':   // Colorpicker Button ID
                            {
                                if(jsonkey == "event" && jsonvalue == "UP")
                                {
                                    var colorpicker = receivedEvent.toString.split('"').get(7)
                                    var moodlight = '{"state":"on","brightness":255,"color":"' + colorpicker + '"}'
                                    openHASP_Plate_Command_JSON.sendCommand("['moodlight " + moodlight + "']")
                                }
                            }
                            case '5':
                            {
                                if(jsonkey == "event" && jsonvalue == "UP")
                                {
                                    openHASP_Plate_Moodlight_OFF.sendCommand(ON) 
                                }
                            }
                        }
                }
                
            }
        }
    end

/* PAGE 1 */

rule "openHASP Page 1 Temperature Update"
when
    Item og_temp_bad_ist_aqara received update or
    Item openHASP_Plate_Page_Current received update 1 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {
        openHASP_Plate_Command_JSON.sendCommand("['p1b6.value_str=" + og_temp_bad_ist_aqara.state.format("%.1f") + "','p1b6.val=" + og_temp_bad_ist_aqara.state.format("%.1f") + "']")
    }
end

rule "openHASP Page 1 Humidity Update"
when
    Item og_humid_bad_ist received update or
    Item openHASP_Plate_Page_Current received update 1 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {
        openHASP_Plate_Command_JSON.sendCommand("['p1b7.value_str=" + og_humid_bad_ist.state.format("%.1f") + "','p1b7.val=" + og_humid_bad_ist.state.format("%.1f") + "']")
    }
end

rule "openHASP Page 1 Receiver Update"
when
    Item onkyo_zone2_Power received update or
    Item openHASP_Plate_Page_Current received update 1 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {
            if (onkyo_zone2_Power.state == ON) 
                {
                    openHASP_Plate_Command_JSON.sendCommand("['p1b13.val=" + 1 + "','p1b12.value_str=ON']")
                }
            else
                {
                    openHASP_Plate_Command_JSON.sendCommand("['p1b13.val=" + 0 + "','p1b12.value_str=OFF']")
                }
    }
end

rule "openHASP Page 1 Source Update"
when
    Item onkyo_zone2_Input received update or
    Item openHASP_Plate_Page_Current received update 1 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {
            if (onkyo_zone2_Input.state == 36) 
                {
                    openHASP_Plate_Command_JSON.sendCommand("['p1b15.val=0','p1b14.value_str=TUNER']")
                }
            else
                {
                    openHASP_Plate_Command_JSON.sendCommand("['p1b15.val=1','p1b14.value_str=PC']")
                }
    }
end

rule "openHASP Page 1 Volume Update"
when
    Item onkyo_zone2_Volume received update or
    Item openHASP_Plate_Page_Current received update 1 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {
        openHASP_Plate_Command_JSON.sendCommand("['p1b16.value_str=" + onkyo_zone2_Volume.state + "']")
    }
end

rule "openHASP Page 1 Weather Update"
when
    Item localCurrentCondition received update or
    Item openHASP_Plate_Page_Current received update 1 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {
        openHASP_Plate_Command_JSON.sendCommand("['p1b8.text=Wetter: " + localCurrentCondition.state + "']")
    }
end

/* PAGE 2 - WEATHER UPDATE */

rule "openHASP Weather Page Update"
    when
        Item openHASP_Plate_Page_Current received update 2 or
        Item localCurrentConditionIcon received update or
        Item localTodayTimestamp received update or
        Item localCurrentTemperature received update or
        Item localCurrentCondition received update or
        Item localTodayDayTemperature received update or
        Item localTodayConditionIcon received update or
        Item localTomorrowDayTemperature received update or
        Item localTomorrowConditionIcon received update or
        Item localDay2DayTemperature received update or
        Item localDay2ConditionIcon received update or
        Item localTodayMinTemperature received update or
        Item localTodayMaxTemperature received update or
        Item localTomorrowMinTemperature received update or
        Item localTomorrowMaxTemperature received update or
        Item localDay2MinTemperature received update or
        Item localDay2MaxTemperature received update or
        Item openHASP_Plate_Page_Current received update 1 or
        Item openHASP_Plate_LWT received update
    then
        if (openHASP_Plate_Page_Current.state == 2)   //Only update page if you're on page 2 (avoid sending too many MQTT messages)
            {
                openHASP_Plate_Command_JSON.sendCommand("['p2b15.text=" + localTodayTimestamp.state.format("%1$td.%1$tm.%1$tY") + "','p2b16.text=" + localCurrentTemperature.state.format("[%.1f °C]") + "','p2b17.text=" + localCurrentHumidity.state + " rLf','p2b18.text=" + localCurrentCondition.state + "','p2b22.text=" + localTodayDayTemperature.state.format("%.1f") + "','p2b32.text=" + localTomorrowDayTemperature.state.format("%.1f") + "','p2b42.text=" + localDay2DayTemperature.state.format("%.1f") + "','p2b62.text=" + localTodayMinTemperature.state.format("%.1f") + "','p2b63.text=" + localTodayMaxTemperature.state.format("%.1f") + "','p2b72.text=" + localTomorrowMinTemperature.state.format("%.1f") + "','p2b73.text=" + localTomorrowMaxTemperature.state.format("%.1f") + "','p2b82.text=" + localDay2MinTemperature.state.format("%.1f") + "','p2b83.text=" + localDay2MaxTemperature.state.format("%.1f") + "']")
            }
end

rule "openHASP weather_icon current Update"
when
    Item openHASP_weather_icon_current received update or
    Item openHASP_Plate_Page_Current received update 2
then
    if (openHASP_Plate_Page_Current.state == 2)   //Only update page if you're on page 2 (avoid sending too many MQTT messages)
    {
        val transform = transform("MAP", "openHASP_weather.map", openHASP_weather_icon_current.state.toString)
        var jsonString ='["p[2].b[14].src=/littlefs/w-128-' + transform + '.png"]'
        openHASP_Plate_Command_JSON.sendCommand(jsonString)
    }
end

rule "openHASP weather_icon today Update"
when
    Item openHASP_weather_icon_today received update or
    Item openHASP_Plate_Page_Current received update 2
then
    if (openHASP_Plate_Page_Current.state == 2)   //Only update page if you're on page 2 (avoid sending too many MQTT messages)
    {
        val transform = transform("MAP", "openHASP_weather.map", openHASP_weather_icon_today.state.toString)
        var jsonString ='["p[2].b[23].src=/littlefs/w-32-' + transform + '.png"]'
        openHASP_Plate_Command_JSON.sendCommand(jsonString)
    }
end

rule "openHASP weather_icon tomorrow Update"
when
    Item openHASP_weather_icon_tomorrow received update or
    Item openHASP_Plate_Page_Current received update 2
then
    if (openHASP_Plate_Page_Current.state == 2)   //Only update page if you're on page 2 (avoid sending too many MQTT messages)
    {
        val transform = transform("MAP", "openHASP_weather.map", openHASP_weather_icon_tomorrow.state.toString)
        var jsonString ='["p[2].b[33].src=/littlefs/w-32-' + transform + '.png"]'
        openHASP_Plate_Command_JSON.sendCommand(jsonString)
    }
end

rule "openHASP weather_icon day2 Update"
when
    Item openHASP_weather_icon_day2 received update or
    Item openHASP_Plate_Page_Current received update 2
then
    if (openHASP_Plate_Page_Current.state == 2)   //Only update page if you're on page 2 (avoid sending too many MQTT messages)
    {
        val transform = transform("MAP", "openHASP_weather.map", openHASP_weather_icon_day2.state.toString)
        var jsonString ='["p[2].b[43].src=/littlefs/w-32-' + transform + '.png"]'
        openHASP_Plate_Command_JSON.sendCommand(jsonString)
    }
end

/* PAGE 3 - MOODLIGHT OFF */

rule "openHASP Display Moodlight OFF"
    when
        Item openHASP_Plate_Moodlight_OFF received update ON
    then
        var moodoff = '{"state":"off"}'
        openHASP_Plate_Command_JSON.sendCommand("['moodlight " + moodoff +"']")
            timermoodoff = createTimer
            (
                now.plusSeconds(5), 
                [|
                    if (openHASP_Plate_Moodlight_OFF.state == ON) {
                        openHASP_Plate_Moodlight_OFF.sendCommand(OFF) 
                    }
                ]
            )
end

/* PAGE 4 - ESP32 STATUS */

rule "openHASP Temperature Convert String to Item Number"
  when
    Item openHASP_Plate_Temperature_str changed
 then
    // use the transformation service to retrieve the value
    val newValue = transform("REGEX", ".*=(\\d*.\\d*).*", openHASP_Plate_Temperature_str.state.toString)

    // post the new value to the Number Item
    openHASP_Plate_Temperature.postUpdate( newValue )
 end

rule "openHASP Page 2 ESP32 Temperatur Update"
when
    Item openHASP_Plate_Temperature received update or
    Item openHASP_Plate_Page_Current received update 4 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 4)   //Only update page if you're on page 4 (avoid sending too many MQTT messages)
    {
        openHASP_Plate_Command_JSON.sendCommand("['p4b15.text=" + openHASP_Plate_Temperature.state + "°C']")
    }
end

rule "openHASP Page 2 ESP32 Uptime Update"
when
    Item openHASP_Plate_Uptime received update or
    Item openHASP_Plate_Page_Current received update 4 or
    Item openHASP_Plate_LWT received update
then
    if (openHASP_Plate_Page_Current.state == 4)   //Only update page if you're on page 4 (avoid sending too many MQTT messages)
    {
        openHASP_Plate_Command_JSON.sendCommand("['p4b17.text=" + openHASP_Plate_Uptime.state + "']")
    }
end

/* RSSI STATUS ICON UPDATE */

rule "openHASP Status RSSI Icon Update"
when
    Item openHASP_Plate_SignalStrength received update or
    Item openHASP_Plate_Page_Current received update 1
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    {   
        if (openHASP_Plate_SignalStrength.state <= -30)
            {
                openHASP_Plate_Command_JSON.sendCommand('["p1b5.text_color=green"]')
            }
        if ((openHASP_Plate_SignalStrength.state > -31)  || (openHASP_Plate_SignalStrength.state >= -60))
            {
                openHASP_Plate_Command_JSON.sendCommand('["p1b5.text_color=orange"]')
            }
        if ((openHASP_Plate_SignalStrength.state > -61)  || (openHASP_Plate_SignalStrength.state >= -80))
            {
                openHASP_Plate_Command_JSON.sendCommand('["p1b5.text_color=tomato"]')
            }
        else
            {
                openHASP_Plate_Command_JSON.sendCommand('["p1b5.text_color=red"]')
            }
    }
end

/* STATUS TIME UPDATE */

rule "openHASP Status Time Update"
when
    Item openHASP_Date_Time received update or
    Item openHASP_Plate_Page_Current received update 1
then
    if (openHASP_Plate_Page_Current.state == 1)   //Only update page if you're on page 1 (avoid sending too many MQTT messages)
    // if (openHASP_Plate_Idle.state == 'off' && openHASP_Plate_Idle.state == 'short') //Only update if plate is in long idle status
    {   
        openHASP_Plate_Command_JSON.sendCommand("['p1b4.text=" + openHASP_Date_Time.state.format("%1$tH:%1$tM") + "']")
    }
end

/* BACKLIGHT DIM AND STANDBY */

rule "openHASP Display Backlight DIM on idle, return to Page 1 and Screensaver"
    when
        Item openHASP_Plate_Idle received update short
    then
        var idleday = '{"state":"on","brightness":10}'
        var idlenight = '{"page":0,"id":99,"obj":"obj","x":0,"y":0,"w":240,"h":320,"radius":0,"hidden":0,"bg_grad_dir":0,"bg_color":"black"}'
        //var Number hour = now.getHour	
            // if ((hour >= 0)  || (hour <= 6)) {
            if(now.plusHours(4).now.getHour() > 11) { //this is 6am to 10pm aka 06:00 to 22:00
                openHASP_Plate_Page_Current.sendCommand("1")   
                openHASP_Plate_Command_JSON.sendCommand("['backlight " + idleday +"']")
            }
            else    {
                openHASP_Plate_Page_Current.sendCommand("1")       
                openHASP_Plate_Command_JSON.sendCommand("['" + idlenight +"']")
                openHASP_Plate_Command_JSON.sendCommand("['backlight off']")
            }
end

rule "openHASP Display Backlight DIM off"
    when
        Item openHASP_Plate_Idle received update off
    then
        var idleoff = '{"state":"on","brightness":255}'
            if(now.plusHours(4).now.getHour() > 11) {
                openHASP_Plate_Command_JSON.sendCommand("['backlight " + idleoff +"']")
            }
            else    {
                openHASP_Plate_Command_JSON.sendCommand("['p0b99.hidden=1','p0b99.delete=']")
                openHASP_Plate_Command_JSON.sendCommand("['backlight " + idleoff +"']")
            }
end
